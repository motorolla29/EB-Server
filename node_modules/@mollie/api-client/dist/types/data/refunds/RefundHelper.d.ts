import type TransformingNetworkClient from '../../communication/TransformingNetworkClient';
import type Callback from '../../types/Callback';
import type Maybe from '../../types/Maybe';
import Helper from '../Helper';
import type Order from '../orders/Order';
import type Payment from '../payments/Payment';
import type Refund from './Refund';
import { type RefundData } from './data';
export default class RefundHelper extends Helper<RefundData, Refund> {
    protected readonly links: RefundData['_links'];
    protected readonly embedded: RefundData['_embedded'];
    constructor(networkClient: TransformingNetworkClient, links: RefundData['_links'], embedded: RefundData['_embedded']);
    /**
     * Returns the payment this refund was created for.
     *
     * @since 3.6.0
     */
    getPayment(): Promise<Payment>;
    getPayment(callback: Callback<Array<Payment>>): void;
    /**
     * Returns the order this refund belongs to.
     *
     * @since 3.6.0
     */
    getOrder(): Promise<Order> | Promise<undefined>;
    getOrder(callback: Callback<Maybe<Order>>): void;
}
