import type TransformingNetworkClient from '../../../communication/TransformingNetworkClient';
import type Page from '../../../data/page/Page';
import type Capture from '../../../data/payments/captures/Capture';
import { type CaptureData } from '../../../data/payments/captures/data';
import type Callback from '../../../types/Callback';
import Binder from '../../Binder';
import { type IterateParameters, type PageParameters } from './parameters';
export declare function getPathSegments(settlementId: string): string;
export default class SettlementCapturesBinder extends Binder<CaptureData, Capture> {
    protected readonly networkClient: TransformingNetworkClient;
    constructor(networkClient: TransformingNetworkClient);
    /**
     * Retrieve all captures in a certain settlement.
     *
     * Captures are used for payments that have the *authorize-then-capture* flow. The only payment methods at the moment that have this flow are *Klarna Pay now*, *Klarna Pay later* and *Klarna Slice
     * it*. Captures are created when (part of) an Order is shipped. The capture is then settled to the merchant.
     *
     * @since 3.7.0
     * @see https://docs.mollie.com/reference/v2/settlements-api/list-settlement-captures
     */
    page(parameters: PageParameters): Promise<Page<Capture>>;
    page(parameters: PageParameters, callback: Callback<Page<Capture>>): void;
    /**
     * Retrieve all captures in a certain settlement.
     *
     * Captures are used for payments that have the *authorize-then-capture* flow. The only payment methods at the moment that have this flow are *Klarna Pay now*, *Klarna Pay later* and *Klarna Slice
     * it*. Captures are created when (part of) an Order is shipped. The capture is then settled to the merchant.
     *
     * @since 3.7.0
     * @see https://docs.mollie.com/reference/v2/settlements-api/list-settlement-captures
     */
    iterate(parameters: IterateParameters): import("../../../plumbing/iteration/HelpfulIterator").default<Capture>;
}
