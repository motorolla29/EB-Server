import { type Links, type Url } from '../data/global';
import type Maybe from '../types/Maybe';
type ApiErrorLinks = Record<string, Url> & Links;
type Info = {
    field?: string;
    statusCode?: number;
    idempotencyKey?: string;
    title?: string;
    links?: ApiErrorLinks;
};
export default class ApiError extends Error {
    readonly name: string;
    readonly field?: string;
    readonly statusCode?: number;
    readonly idempotencyKey?: string;
    protected title?: string;
    protected links?: ApiErrorLinks;
    private readonly [Symbol.toStringTag];
    constructor(message: string, info?: Info);
    /**
     * Get the documentation URL
     *
     * @since 3.0.0
     */
    getDocumentationUrl(): Maybe<string>;
    /**
     * Get the dashboard URL
     *
     * @since 3.0.0
     */
    getDashboardUrl(): Maybe<string>;
    /**
     * Check if the link exists
     *
     * @since 3.0.0
     */
    hasLink(key: string): boolean;
    /**
     * Retrieve a link by name
     *
     * @since 3.0.0
     */
    getLink(key: string): Maybe<Url>;
    /**
     * @since 3.0.0
     */
    getUrl(key: keyof ApiErrorLinks): Maybe<string>;
    toString(): string;
    /**
     * Creates and returns an `ApiError` from the passed response.
     *
     * @since 3.0.0
     */
    static createFromResponse(body: any, idempotencyKey: string | undefined): ApiError;
}
export {};
