import type TransformingNetworkClient from '../../../communication/TransformingNetworkClient';
import type Callback from '../../../types/Callback';
import type Maybe from '../../../types/Maybe';
import Helper from '../../Helper';
import type Shipment from '../../orders/shipments/Shipment';
import type Payment from '../Payment';
import type Capture from './Capture';
import { type CaptureData } from './data';
import type { Settlement } from '../../settlements/data';
export default class CaptureHelper extends Helper<CaptureData, Capture> {
    protected readonly links: CaptureData['_links'];
    protected readonly embedded: Capture['_embedded'];
    constructor(networkClient: TransformingNetworkClient, links: CaptureData['_links'], embedded: Capture['_embedded']);
    /**
     * Returns the payment the capture was created for.
     *
     * @since 3.6.0
     */
    getPayment(): Promise<Payment>;
    getPayment(callback: Callback<Array<Payment>>): void;
    /**
     * Returns the shipment that triggered the capture to be created (if any).
     *
     * @since 3.6.0
     */
    getShipment(): Promise<Shipment> | Promise<undefined>;
    getShipment(callback: Callback<Maybe<Shipment>>): void;
    /**
     * Returns the settlement this capture has been settled with (if any).
     *
     * @since 4.1.0
     */
    getSettlement(): Promise<Settlement> | Promise<undefined>;
    getSettlement(callback: Callback<Maybe<Settlement>>): void;
}
